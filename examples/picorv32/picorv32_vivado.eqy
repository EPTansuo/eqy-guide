##############################################################
#
# Gold: Modified PicoRV32 Verilog HDL
# Gate: Synthesis Output from Xilinx Vivado

[gold]
read_verilog picorv32_modified.v
read_verilog init.v
prep -top testbench

[gate]
logger -nowarn limited.support.for.tri-state.*/cells_sim.v
read_verilog -nowb -noblackbox +/xilinx/cells_sim.v
read_verilog picorv32_vivado.v
read_verilog init.v
prep -top testbench

rename -hide t:GND t:VCC t:OBUF t:IBUF t:BUFG t:FDRE t:FDSE
flatten t:GND t:VCC t:OBUF t:IBUF t:BUFG t:FDRE t:FDSE
rename -hide w:*BUF*

setattr -mod -set unique 1 picorv32
uniquify t:RAM32X1D t:RAM32M
opt -noff -keepdc -fast
hierarchy

[script]
sim -w -vcd init_gate.vcd -clock clk -resetn resetn -n 100
hierarchy -top picorv32


##############################################################
#
# Delete unused outputs

[script]
cd picorv32
delete -output mem_la_* trace_* pcpi_* eoi
rename -hide mem_la_* trace_* eoi

##############################################################
#
# Split some fiddly nets on either side

[gold]
splitnets cpu_state
splitnets alu_out
splitnets count_instr
splitnets mem_rdata_latched
splitnets reg_next_pc

[gate]
splitnets cpu_state0_out

[script]
splitnets -ports pcpi_rs[12]
splitnets decoded_imm_j
rename -hide decoded_imm_j[15]
rename -hide decoded_imm_j[16]
rename -hide decoded_imm_j[17]
rename -hide decoded_imm_j[18]
rename -hide decoded_imm_j[19]
rename -hide decoded_imm_j[20]
rename -hide decoded_imm_j[21]
rename -hide decoded_imm_j[22]
rename -hide decoded_imm_j[23]
rename -hide decoded_imm_j[24]
rename -hide decoded_imm_j[25]
rename -hide decoded_imm_j[26]
rename -hide decoded_imm_j[27]
rename -hide decoded_imm_j[28]
rename -hide decoded_imm_j[29]
rename -hide decoded_imm_j[30]
cd ..

[collect picorv32]
group alu_out[]
group decoded_imm_j[]

##############################################################
#
# Purge X-bits and other cleanups

[gold]
setundef -zero -undriven -init
opt -fine -keepdc -fast
memory_map
splitcells
clean

[gate]
setundef -zero -undriven -init
opt -keepdc -fast
clean


##############################################################
#
# PicoRV32 Register File Outputs

[match picorv32]
gold-match pcpi_rs[12][]

[collect picorv32]
# group the 32-bit register file outputs into 4 single-byte lanes
group pcpi_rs1[0]  /pcpi_rs[12]\[[0-7]\]/
group pcpi_rs1[8]  /pcpi_rs[12]\[([89]|1[0-5])\]/
group pcpi_rs1[16] /pcpi_rs[12]\[(1[6-9]|2[0-3])\]/
group pcpi_rs1[24] /pcpi_rs[12]\[(2[4-9]|3[01])\]/
solo pcpi_rs[12][]

[partition picorv32]
name regfile_byte0 pcpi_rs1[0]
name regfile_byte1 pcpi_rs1[8]
name regfile_byte2 pcpi_rs1[16]
name regfile_byte3 pcpi_rs1[24]


##############################################################
#
# Vivado weirdly renames the CPU state FSM register:
#     cpu_state0_out[*]       the value before the FF, i.e. the next state
#     cpu_state_reg_n_0_[*]   the value after the FF, i.e. cpu_state
# except bits 4 and 6, as bit 4 encodes the unused "ld_rs2" state, and
# bit 6 (encoding for "fetch") ended up as 1-bit reg_next_pc wire.

[match picorv32]
gold-match cpu_state[0] cpu_state_reg_n_0_[0]
gold-match cpu_state[1] cpu_state_reg_n_0_[1]
gold-match cpu_state[2] cpu_state_reg_n_0_[2]
gold-match cpu_state[3] cpu_state_reg_n_0_[3]
gold-match cpu_state[4] cpu_state0_out[4]
gold-match cpu_state[5] cpu_state_reg_n_0_[5]
gold-match cpu_state[6] reg_next_pc
gold-match cpu_state[7] cpu_state_reg_n_0_[7]

[collect picorv32]
solo-group cpu_state[]

[partition picorv32]
name cpu_state cpu_state[]

##############################################################
#
# More Manual Matches
# .. identified via vcdmatch.py

[match picorv32]
gold-match alu_out[] alu_out_q[\2]_i_1_n_0
gold-match count_instr[] count_instr_reg_n_0_[\2]
gold-match reg_next_pc[] reg_next_pc_reg_n_0_[\2]

gold-match decoder_trigger        \0_reg_n_0
gold-match latched_is_lb          \0_reg_n_0
gold-match latched_is_lh          \0_reg_n_0
gold-match latched_stalu          \0_reg_n_0
gold-match latched_store          \0_reg_n_0
gold-match mem_do_prefetch        \0_reg_n_0

gold-match decoder_pseudo_trigger \0_reg_n_0
gold-match latched_branch         \0_reg_n_0
gold-match latched_is_lu          \0_reg_n_0
gold-match mem_do_rinst           \0_reg_n_0

gate-nomatch decoder_pseudo_trigger
gate-nomatch latched_branch
gate-nomatch latched_is_lu
gate-nomatch mem_do_rinst


##############################################################
#
# Additional False Equivalent Points
# .. identified via picorv32_vivado/modules/picorv32.sby

[match picorv32]
gate-nomatch mem_state
gate-nomatch mem_wordsize
gate-nomatch reg_out
gate-nomatch reg_op1
gate-nomatch reg_sh


##############################################################
#
# Partitioning and Strategies

[collect picorv32]
solo-join cpuregs_wrdata
solo-join decoded_*
solo-join /(instr|is)_.*/
solo-join latched_rd
solo-join mem_*
solo-join alu_*
solo-join pcpi_insn

[partition picorv32]

merge is_*
merge alu_*
merge instr_*
merge count_*
final cpu_state[]
name reg_next_pc reg_next_pc[]
final decoder_trigger
final decoder_pseudo_trigger
final cpuregs_wrdata
merge pcpi_valid pcpi_insn
final trap

final mem_addr
final mem_do_rinst
merge mem_valid mem_do_*,mem_instr
merge mem_wdata mem_wstrb
merge decoded_imm decoded_*

merge latched_*

amend cpu_state[]      trap
amend cpu_state[]      count_*
amend cpu_state[]      decoder_trigger

amend cpu_state[]      decoder_pseudo_trigger
amend mem_valid        decoder_pseudo_trigger
amend mem_do_*         decoder_pseudo_trigger
amend instr_*          decoder_pseudo_trigger
amend is_lbu_lhu_lw    decoder_pseudo_trigger
amend is_slti_blt_slt  decoder_pseudo_trigger
amend is_sltiu_bltu_*  decoder_pseudo_trigger
amend is_sll_srl_sra   decoder_pseudo_trigger
amend decoder_trigger  decoder_pseudo_trigger
amend latched_is_lb    decoder_pseudo_trigger
amend latched_is_lh    decoder_pseudo_trigger
amend latched_is_lu    decoder_pseudo_trigger

amend mem_do_prefetch  cpu_state[]
amend mem_do_rdata     cpu_state[]
amend mem_do_wdata     cpu_state[]
amend decoded_imm_j[]  cpu_state[]

amend cpu_state[]      reg_next_pc[]
amend mem_do_prefetch  reg_next_pc[]
amend mem_do_rdata     reg_next_pc[]
amend decoded_rs1      reg_next_pc[]
amend decoded_imm_j[]  reg_next_pc[]

# PDR seems to be faster with these
amend instr_*          reg_next_pc[]
amend is_*             reg_next_pc[]

amend cpu_state[]      cpuregs_wrdata
amend decoded_imm_j[]  cpuregs_wrdata
amend mem_do_prefetch  cpuregs_wrdata
amend mem_do_rdata     cpuregs_wrdata

amend cpu_state[]      pcpi_rs1[]
amend instr_*          pcpi_rs1[]
amend is_*             pcpi_rs1[]
amend mem_do_rinst     pcpi_rs1[]
amend decoded_imm_j[]  pcpi_rs1[]
amend decoder_trigger  pcpi_rs1[]
amend decoder_pseudo*  pcpi_rs1[]
amend latched_branch   pcpi_rs1[]

amend cpu_state[]      decoded_imm
amend decode*          decoded_imm

amend cpu_state[]      latched_rd
amend decoder_trigger  latched_rd
amend instr_*          latched_rd
amend is_*             latched_rd

amend cpu_state[]      mem_valid

amend cpu_state[]      mem_addr
amend decoded_imm_j[]  mem_addr
amend mem_do_rdata     mem_addr
amend mem_do_prefetch  mem_addr

amend cpu_state[]      mem_do_rinst
amend decoded_imm_j[]  mem_do_rinst
amend decoder_pseudo*  mem_do_rinst
amend decoder_trigger  mem_do_rinst
amend instr_*          mem_do_rinst
amend is_*             mem_do_rinst

amend cpu_state[]      mem_wdata
amend mem_do_prefetch  mem_wdata
amend mem_do_wdata     mem_wdata
amend mem_do_rdata     mem_wdata


##########################################
# Amend Templates   (use with tryamend.sh)
#
#{C} amend cpu_state[]      XYZ
#{M} amend mem_*            XYZ
#{D} amend decode*          XYZ
#{I} amend instr_*          XYZ
#{S} amend is_*             XYZ
#{A} amend alu*             XYZ
#{N} amend count*           XYZ
#{L} amend latch*           XYZ
#{P} amend pcpi*            XYZ
#{R} amend *reg*            XYZ
#{T} amend trap             XYZ
#
#{M1} amend mem_addr         XYZ
#{M2} amend mem_instr        XYZ
#{M3} amend mem_valid        XYZ
#{M4} amend mem_wdata        XYZ
#{M5} amend mem_wstrb        XYZ
#{M6} amend mem_do_prefetch  XYZ
#{M7} amend mem_do_rdata     XYZ
#{M8} amend mem_do_rinst     XYZ
#{M9} amend mem_do_wdata     XYZ
#
#{D1} amend decoded_rd       XYZ
#{D2} amend decoded_rs1      XYZ
#{D3} amend decoded_imm_j[]  XYZ
#{D4} amend decoded_imm      XYZ
#{D5} amend decoder_pseudo*  XYZ
#{D6} amend decoder_trigger  XYZ
#
#{I01} amend instr_add        XYZ
#{I02} amend instr_addi       XYZ
#{I03} amend instr_and        XYZ
#{I04} amend instr_andi       XYZ
#{I05} amend instr_auipc      XYZ
#{I06} amend instr_beq        XYZ
#{I07} amend instr_bge        XYZ
#{I08} amend instr_bgeu       XYZ
#{I09} amend instr_blt        XYZ
#{I10} amend instr_bltu       XYZ
#{I11} amend instr_bne        XYZ
#{I12} amend instr_jal        XYZ
#{I13} amend instr_jalr       XYZ
#{I14} amend instr_lb         XYZ
#{I15} amend instr_lbu        XYZ
#{I16} amend instr_lh         XYZ
#{I17} amend instr_lhu        XYZ
#{I18} amend instr_lui        XYZ
#{I19} amend instr_lw         XYZ
#{I20} amend instr_or         XYZ
#{I21} amend instr_ori        XYZ
#{I22} amend instr_rdcycle    XYZ
#{I23} amend instr_rdcycleh   XYZ
#{I24} amend instr_rdinstr    XYZ
#{I25} amend instr_rdinstrh   XYZ
#{I26} amend instr_sb         XYZ
#{I27} amend instr_sh         XYZ
#{I28} amend instr_sll        XYZ
#{I29} amend instr_slli       XYZ
#{I30} amend instr_slt        XYZ
#{I31} amend instr_slti       XYZ
#{I32} amend instr_sltiu      XYZ
#{I33} amend instr_sltu       XYZ
#{I34} amend instr_sra        XYZ
#{I35} amend instr_srai       XYZ
#{I36} amend instr_srl        XYZ
#{I37} amend instr_srli       XYZ
#{I38} amend instr_sub        XYZ
#{I39} amend instr_sw         XYZ
#{I40} amend instr_xor        XYZ
#{I41} amend instr_xori       XYZ
#
#{S01} amend is_alu_reg_imm   XYZ
#{S02} amend is_alu_reg_reg   XYZ
#{S03} amend is_beq_bne_*     XYZ
#{S04} amend is_compare       XYZ
#{S05} amend is_jalr_addi_*   XYZ
#{S06} amend is_lb_lh_lw_*    XYZ
#{S07} amend is_lbu_lhu_lw    XYZ
#{S08} amend is_lui_auipc_jal XYZ
#{S09} amend is_lui_*_add_sub XYZ
#{S10} amend is_sb_sh_sw      XYZ
#{S11} amend is_sll_srl_sra   XYZ
#{S12} amend is_slli_srli_*   XYZ
#{S13} amend is_slti_blt_slt  XYZ
#{S14} amend is_sltiu_bltu_*  XYZ
#
#{L1} amend latched_rd       XYZ
#{L2} amend latched_branch   XYZ
#{L3} amend latched_stalu    XYZ
#{L4} amend latched_store    XYZ
#{L5} amend latched_is_lb    XYZ
#{L6} amend latched_is_lh    XYZ
#{L7} amend latched_is_lu    XYZ

[strategy pdr]
use sby
engine abc pdr
timeout 5400

# [strategy sby]
# use sby
# depth 14
# engine smtbmc bitwuzla
